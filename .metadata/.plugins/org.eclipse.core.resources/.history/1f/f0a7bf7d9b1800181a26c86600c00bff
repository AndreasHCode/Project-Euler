package solution;

import java.util.ArrayList;
import java.util.List;

public class Main {

	public static void main(String[] args) {
		boolean searching = true;
		int number = 1;
		int triangleNumber = 0;

		while (searching) {
			triangleNumber += number;

			List<Integer> factors = new ArrayList<>();

			factors.add(1);
			findFactors(triangleNumber, factors, 1, 0);
			factors.add(triangleNumber);

			// for (int i = 1; i <= triangleNumber; i++) {
			// if (triangleNumber % i == 0) {
			// factors.add(i);
			// }
			// }

			if (factors.size() > 47) {
				System.out.println("Number: " + number + " Triangle: "
						+ triangleNumber + " SIZE: " + factors.size());
				System.out.println(factors);
			}

			if (number % 100 == 0) {
				System.out.println("Time for last 100: "
						+ (System.currentTimeMillis() - start100));
				start100 = System.currentTimeMillis();
			}

			if (factors.size() > 500) {
				System.out.println(factors);
				searching = false;
			}

			number++;
		}

		long stop = System.currentTimeMillis();
		System.out.println((stop - start) / 1000);
	}

	private static void findFactors(int triangleNumber, List<Integer> factors,
			int factor, int start) {
		for (Integer aPrime : primes.subList(start, primes.size())) {
			int primeFactor = aPrime * factor;

			if (primeFactor > triangleNumber / 2) {
				return;
			}

			if (isDivisible(triangleNumber, primeFactor)) {
				factors.add(primeFactor);
				findFactors(triangleNumber, factors, primeFactor, start);
			}

			start++;
		}

	}
}
